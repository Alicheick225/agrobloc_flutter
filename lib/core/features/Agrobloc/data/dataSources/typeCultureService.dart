// type_culture_service.dart
import 'dart:convert';
import 'package:agrobloc/core/features/Agrobloc/data/models/typecultureModel.dart';

import 'package:agrobloc/core/utils/api_token.dart';
import 'dart:async';

class TypeCultureService {
  final ApiClient api = ApiClient(ApiConfig.typesCulturesBaseUrl);
  static const Duration timeoutDuration = Duration(seconds: 30);

  // ‚úÖ R√©cup√©rer toutes les cultures
  Future<List<TypeCulture>> getAllTypes() async {
    try {
      print('üîÑ TypeCultureService: Appel API /api/types-cultures');
      final response = await api.get('/api/types-cultures').timeout(timeoutDuration);
      print('üì• TypeCultureService: R√©ponse re√ßue - Status: ${response.statusCode}');
      print('üìÑ TypeCultureService: Body: ${response.body}');

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        print('üìä TypeCultureService: ${data.length} √©l√©ments JSON re√ßus');
        return data.map((json) => TypeCulture.fromJson(json)).toList();
      } else {
        throw Exception('Erreur ${response.statusCode}: ${response.body}');
      }
    } catch (e) {
      // Gestion sp√©cifique des erreurs
      if (e.toString().contains('Token non trouv√©') || e.toString().contains('TokenInvalidException')) {
        throw Exception('Token non trouv√©. Veuillez vous connecter.');
      }
      if (e.toString().contains('Serveur non accessible')) {
        throw Exception('Serveur non accessible. V√©rifiez votre connexion r√©seau ou contactez le support.');
      }
      if (e is TimeoutException) {
        throw Exception('D√©lai d\'attente d√©pass√©. Le serveur met trop de temps √† r√©pondre. R√©essayez plus tard.');
      }
      print('‚ùå TypeCultureService: Erreur lors de la r√©cup√©ration des types de culture: $e');
      throw Exception('Erreur lors de la r√©cup√©ration des types de culture: $e');
    }
  }

  // ‚úÖ R√©cup√©rer une culture par ID
  Future<TypeCulture> getTypeById(String id) async {
    try {
      final response = await api.get('/api/types-cultures/$id').timeout(timeoutDuration);

      if (response.statusCode == 200) {
        return TypeCulture.fromJson(jsonDecode(response.body));
      } else {
        throw Exception('Erreur ${response.statusCode}: ${response.body}');
      }
    } catch (e) {
      throw Exception('Erreur lors de la r√©cup√©ration du type de culture: $e');
    }
  }

  // ‚úÖ Cr√©er une nouvelle culture
  Future<TypeCulture> createType(TypeCulture type) async {
    try {
      final response = await api.post('/api/types-cultures', type.toJson())
          .timeout(timeoutDuration);

      if (response.statusCode == 201) {
        return TypeCulture.fromJson(jsonDecode(response.body));
      } else {
        throw Exception('Erreur ${response.statusCode}: ${response.body}');
      }
    } catch (e) {
      throw Exception('Erreur lors de la cr√©ation du type de culture: $e');
    }
  }
}
