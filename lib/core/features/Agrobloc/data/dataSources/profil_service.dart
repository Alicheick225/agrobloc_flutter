import 'dart:convert';
import 'package:agrobloc/core/features/Agrobloc/data/models/profil_model.dart';
import 'package:agrobloc/core/utils/api_token.dart';

class ProfilService {
  final ApiClient _apiClient = ApiClient("http://192.168.252.199:3000/authentification");

  /// R√©cup√©rer le profil utilisateur avec authentification
  Future<ProfilResponse> getProfilUtilisateur(String userId) async {
    try {
      print("üîÑ ProfilService.getProfilUtilisateur() - R√©cup√©ration du profil pour userId: $userId");
      print("URL appel√©e: ${_apiClient.baseUrl}/informations-profil/$userId");

      // Utiliser l'ApiClient avec authentification automatique (withAuth: true par d√©faut)
      final response = await _apiClient.get("/informations-profil/$userId");

      print("Status Code: ${response.statusCode}");
      print("Response Headers: ${response.headers}");
      print("Response Body: ${response.body}");

      if (response.statusCode == 200) {
        // V√©rifier si la r√©ponse est bien du JSON
        if (response.body.startsWith('<!DOCTYPE') || response.body.startsWith('<html')) {
          return ProfilResponse(
            success: false,
            message: "Le serveur a retourn√© du HTML au lieu de JSON. V√©rifiez l'URL de l'API.",
          );
        }
        
        try {
          final data = jsonDecode(response.body);
          print("‚úÖ ProfilService.getProfilUtilisateur() - Donn√©es JSON pars√©es avec succ√®s");
          
          // V√©rifier la structure de la r√©ponse
          if (data.containsKey("user")) {
            final user = MesInformationsModel.fromJson(data["user"]);
            return ProfilResponse(success: true, user: user);
          } else if (data.containsKey("success") && data["success"] == true) {
            // Si la structure est diff√©rente, adapter selon votre API
            final user = MesInformationsModel.fromJson(data["data"] ?? data);
            return ProfilResponse(success: true, user: user);
          } else if (data.containsKey("nom") || data.containsKey("email")) {
            // Si les donn√©es utilisateur sont directement dans la r√©ponse
            final user = MesInformationsModel.fromJson(data);
            return ProfilResponse(success: true, user: user);
          } else {
            print("‚ùå ProfilService.getProfilUtilisateur() - Structure de r√©ponse inattendue: ${data.keys}");
            return ProfilResponse(
              success: false,
              message: data["message"] ?? "Structure de r√©ponse inattendue",
            );
          }
        } catch (jsonError) {
          print("‚ùå ProfilService.getProfilUtilisateur() - Erreur de parsing JSON: $jsonError");
          return ProfilResponse(
            success: false,
            message: "Erreur de format de r√©ponse: ${jsonError.toString()}",
          );
        }
      } else {
        // Gestion des erreurs HTTP
        print("‚ùå ProfilService.getProfilUtilisateur() - Erreur HTTP ${response.statusCode}");
        
        String errorMessage;
        switch (response.statusCode) {
          case 401:
            errorMessage = "Session expir√©e. Veuillez vous reconnecter.";
            break;
          case 403:
            errorMessage = "Acc√®s refus√©. Permissions insuffisantes.";
            break;
          case 404:
            errorMessage = "Utilisateur non trouv√© ou endpoint incorrect.";
            break;
          case 500:
            errorMessage = "Erreur serveur interne. R√©essayez plus tard.";
            break;
          case 502:
          case 503:
          case 504:
            errorMessage = "Service temporairement indisponible. R√©essayez plus tard.";
            break;
          default:
            errorMessage = "Erreur HTTP ${response.statusCode}";
        }
        
        // Essayer de parser le message d'erreur du serveur
        try {
          if (!response.body.startsWith('<!DOCTYPE') && !response.body.startsWith('<html')) {
            final data = jsonDecode(response.body);
            errorMessage = data["message"] ?? data["error"] ?? errorMessage;
          }
        } catch (e) {
          // Ignore si ce n'est pas du JSON valide
          print("Impossible de parser l'erreur JSON: $e");
        }
        
        return ProfilResponse(success: false, message: errorMessage);
      }
    } catch (e) {
      print("‚ùå ProfilService.getProfilUtilisateur() - Exception: $e");
      
      // Gestion sp√©cifique des exceptions de votre ApiClient
      if (e.toString().contains('circuit breaker ouvert')) {
        return ProfilResponse(
          success: false,
          message: "Service temporairement indisponible. R√©essayez dans quelques instants.",
        );
      } else if (e.toString().contains('Token non trouv√©') || e.toString().contains('Token non trouv√© ou invalide')) {
        return ProfilResponse(
          success: false,
          message: "Session expir√©e. Veuillez vous reconnecter.",
        );
      } else if (e.toString().contains('SocketException')) {
        return ProfilResponse(
          success: false,
          message: "Erreur de connexion r√©seau. V√©rifiez votre connexion internet.",
        );
      } else if (e.toString().contains('TimeoutException')) {
        return ProfilResponse(
          success: false,
          message: "D√©lai d'attente d√©pass√©. R√©essayez plus tard.",
        );
      } else if (e.toString().contains('FormatException')) {
        return ProfilResponse(
          success: false,
          message: "R√©ponse invalide du serveur. L'API retourne du HTML au lieu de JSON.",
        );
      }
      
      return ProfilResponse(
        success: false,
        message: "Erreur de connexion: ${e.toString()}",
      );
    }
  }

  /// R√©cup√©rer le profil utilisateur en utilisant l'userId du token
  Future<ProfilResponse> getMyProfil() async {
    try {
      print("üîÑ ProfilService.getMyProfil() - R√©cup√©ration de l'userId depuis le token...");
      
      // Utiliser la m√©thode getUserId() de votre ApiClient
      final userId = await _apiClient.getUserId();
      print("‚úÖ ProfilService.getMyProfil() - UserId r√©cup√©r√©: $userId");
      
      // Appeler getProfilUtilisateur avec l'userId
      return await getProfilUtilisateur(userId);
    } catch (e) {
      print("‚ùå ProfilService.getMyProfil() - Erreur lors de la r√©cup√©ration de l'userId: $e");
      
      if (e.toString().contains('Token non trouv√©')) {
        return ProfilResponse(
          success: false,
          message: "Session expir√©e. Veuillez vous reconnecter.",
        );
      } else if (e.toString().contains('user_id manquant')) {
        return ProfilResponse(
          success: false,
          message: "Token invalide. Veuillez vous reconnecter.",
        );
      }
      
      return ProfilResponse(
        success: false,
        message: "Erreur lors de la r√©cup√©ration des informations utilisateur: ${e.toString()}",
      );
    }
  }

  /// M√©thode pour tester la connectivit√©
  Future<bool> testConnectivity() async {
    try {
      print("üîÑ ProfilService.testConnectivity() - Test de connectivit√©...");
      
      // Utiliser un endpoint simple pour tester
      final response = await _apiClient.get("/test", withAuth: false);
      
      final isConnected = response.statusCode == 200 || response.statusCode == 404; // 404 est OK pour un test
      print("‚úÖ ProfilService.testConnectivity() - R√©sultat: $isConnected (status: ${response.statusCode})");
      
      return isConnected;
    } catch (e) {
      print("‚ùå ProfilService.testConnectivity() - Erreur: $e");
      return false;
    }
  }

  /// M√©thode pour v√©rifier si l'utilisateur est connect√©
  Future<bool> isAuthenticated() async {
    try {
      // Essayer de r√©cup√©rer l'userId, ce qui v√©rifie implicitement le token
      await _apiClient.getUserId();
      return true;
    } catch (e) {
      return false;
    }
  }

  /// M√©thode pour forcer la r√©initialisation du circuit breaker
  void resetCircuitBreaker() {
    // Votre ApiClient g√®re automatiquement le circuit breaker
    // Cette m√©thode peut √™tre utilis√©e si vous ajoutez une m√©thode reset dans ApiClient
    print("üîÑ ProfilService.resetCircuitBreaker() - Circuit breaker sera r√©initialis√© automatiquement");
  }

  void dispose() {}
}

class ProfilResponse {
  final bool success;
  final MesInformationsModel? user;
  final String? message;

  ProfilResponse({required this.success, this.user, this.message});

  @override
  String toString() {
    return 'ProfilResponse(success: $success, user: ${user != null ? 'present' : 'null'}, message: $message)';
  }
}